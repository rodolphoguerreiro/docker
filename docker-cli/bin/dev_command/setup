#!/bin/bash
echo 'Development setup';
echo '';

setup() {

    cd ${DEV_PATH};
    
    rabbitmq() {
        if [ -z "${RABBITMQ_DEFAULT_USER}" ]; then
            local user='' default='rabbitmq';
            echo 'Which username do you want to use to default RabbitMQ account - default: '${default}'';
            read -p' ' user;
            if [ -z "${user}" ]; then
                user=${default};
            fi

            export RABBITMQ_DEFAULT_USER=${user};
            echo 'RABBITMQ_DEFAULT_USER='${RABBITMQ_DEFAULT_USER} >> ${DEV_WORKPATH}/.env;
        fi;

	if [ -z "${RABBITMQ_DEFAULT_PASS}" ]; then
            local password='' default='rabbitmq';
            echo 'Which username do you want to use to default RabbitMQ account - default: '${default}'';
            read -p' ' password;
            if [ -z "${password}" ]; then
                password=${default};
            fi

            export RABBITMQ_DEFAULT_PASS=${password};
            echo 'RABBITMQ_DEFAULT_PASS='${RABBITMQ_DEFAULT_PASS} >> ${DEV_WORKPATH}/.env;
        fi;

	if [ -z "${RABBITMQ_ERLANG_COOKIE}" ]; then
            local cookie='' default='SWQOKODSQALRPCLNMEQG';
            echo 'Which Erlang Cookie do you want to use to RabbitMQ - default: '${default}'';
            read -p' ' cookie;
            if [ -z "${cookie}" ]; then
                cookie=${default};
            fi

            export RABBITMQ_ERLANG_COOKIE=${cookie};
            echo 'RABBITMQ_ERLANG_COOKIE='${RABBITMQ_ERLANG_COOKIE} >> ${DEV_WORKPATH}/.env;
        fi;
        
        if [ -z "${RABBITMQ_DEFAULT_VHOST}" ]; then
            local vhost='/';

            export RABBITMQ_DEFAULT_VHOST=${vhost};
            echo 'RABBITMQ_DEFAULT_VHOST='${RABBITMQ_DEFAULT_VHOST} >> ${DEV_WORKPATH}/.env;
        fi;

        return 0;
    }
    
    mysql() {
        if [ -z "${MYSQL_ROOT_PASSWORD}" ]; then
            local password='' default='digitalhub';
            echo 'Which password do you want to use to root mysql account - default: '${default}'';
            read -p' ' password;
            if [ -z "${password}" ]; then
                password=${default};
            fi

            export MYSQL_ROOT_PASSWORD=${password};
            echo 'MYSQL_ROOT_PASSWORD='${MYSQL_ROOT_PASSWORD} >> ${DEV_WORKPATH}/.env;
        fi;


        if [ -z "`docker volume ls -q -f 'name=digitalhubdev-mysql-volume'`" ]; then
            echo 'Create a persistant database volume in '${DEV_WORKPATH}'/mysql';
            mkdir -p ${DEV_WORKPATH}/mysql
            docker volume create -o 'type=none' -o 'device='${DEV_WORKPATH}'/mysql' -o 'o=bind' digitalhubdev-mysql-volume

        fi

        echo 'Starting regular database user, waiting for db to become ready';
        ./${DEV_SELF} up db;
        while true; do
            ./${DEV_SELF} logs db 2>&1 | grep 'port: 3306  Percona' > /dev/null && break;
            echo -n '.';
            sleep 1;
        done
        echo '';

        local user=${USER};

        # Check if already exists
        echo "select * from mysql.user where user='${user}';" | dev myroot 2>/dev/null| grep "${user}" >/dev/null && return 1;

        echo 'Database user has access to databases "'${user}'_*"';
        echo '';
        echo "\
create user '${user}';\
grant all on ${user}.* to '${user}';\
update mysql.db set db = '${user}\_%' where user = '${user}';\
flush privileges;" | ./${DEV_SELF} myroot 2>/dev/null;

        return 0;
    }

    php() {
        dc php && echo 'PHP configured with version '${DEV_PHP} && return 1;

        local versions="`dc php_versions`" version='';
        echo "Which default PHP version should we enable";
        for v in ${versions}; do
            echo "- ${v}";
        done

        read -p'? ' version;
        [ -z "${version}" ] && return 1;

        touch ${DEV_WORKSPACE_PATH}/.${version};

        return 0;
    }

    suffix() {
        if [ -n "${DOMAINSUFFIX}" ]; then
            echo 'Listening on "*'${DOMAINSUFFIX}'"';
            return 1;
        fi

        local suffix='' default='.localhost';
        suffix=${default};

        echo 'DOMAINSUFFIX='${suffix} >> ${DEV_WORKPATH}/.env;
        export DOMAINSUFFIX=${suffix};

        return 0;
    }

    uid() {
        if [ -n "${USERID}" ]; then
            echo 'using UID "*'${USERID}'"';
            return 1;
        fi

        local userid='' default=$(id -u);
        echo 'Which UID do you want to use - current UID: '${default}'';
        read -p' ' userid;
         if [ -z "${userid}" ]; then
            userid=${default};
        fi

        echo 'USERID='${userid} >> ${DEV_WORKPATH}/.env;
        export USERID=${userid};

        return 0;
    }

    gid() {
        if [ -n "${GROUPID}" ]; then
            echo 'using GID "*'${GROUPID}'"';
            return 1;
        fi

        local groupid='' default=$(id -g);
        echo 'Which GID do you want to use - current GID: '${default}'';
        read -p' ' groupid;
         if [ -z "${groupid}" ]; then
            groupid=${default};
        fi

        echo 'GROUPID='${groupid} >> ${DEV_WORKPATH}/.env;
        export GROUPID=${groupid};

        return 0;
    }

    start() {
        ./${DEV_SELF} up;
    }

    shell() {
        echo 'Add next lines to your shell to implement `cdw`(to workspace) and `dev` to PATH';
        echo '';
        ./${DEV_SELF} profile;
    }

    suffix;
    php;
    mysql;
    rabbitmq;
    start;
    shell;
}
setup;

exit 0;

